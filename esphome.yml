substitutions:
  name: esphome-web-a86efc
  friendly_name: AutoStopStart

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# To have a "next url" for improv serial
web_server:

globals:
  - id: countdown_timer
    type: int
    restore_value: yes
    initial_value: '0'
  - id: relay_on
    type: bool
    restore_value: yes
    initial_value: '0'

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true

display:
  - platform: lcd_pcf8574
    id: lcd_display
    dimensions: 16x2
    address: 0x27
    update_interval: 1s
    lambda: |-
      if (id(countdown_timer)>0) {
        id (countdown_timer) -= 1;
      }

      if (id(emergency_stop).state) {
        it.print(12, 0, "STOP");
        id(relay_on) = 0;
        id(relay).turn_off();
        id(countdown_timer)=10;
      }
      else {
        it.print(12, 0, "    ");
        if (id(moving_distance).has_state()) {
          it.printf(0, 0, "%3.0fcm", id(moving_distance).state); 
          if (id(moving_distance).state < 100) {
            if (id(countdown_timer) == 0) {
              id(relay_on) = 1;
              id(relay).turn_on();
              id(countdown_timer)=30;
            }
          }
        }
      }

      if (id(relay).state) {
        if (id(countdown_timer) == 0) {
          id(relay).turn_off();
          id(relay_on) = 0;
          id(countdown_timer)=10;
        }
      }

      if (id(relay).state) {
        it.print(0, 1, "ON ");
      }
      else {
        it.print(0, 1, "OFF");
      }
      it.printf(4, 1, "[%1d] %3ds", id(relay_on), id(countdown_timer)); 

output:
  - platform: ledc
    id: lcd_backlight
    pin: GPIO32
    frequency: 1000Hz

light:
  - platform: monochromatic
    output: lcd_backlight
    name: "LCD Backlight"

uart:
  tx_pin: GPIO18
  rx_pin: GPIO19
  baud_rate: 256000  # LD2410 utilise une communication rapide

ld2410:

switch:
  - platform: gpio
    pin: GPIO13
    name: "Relay"
    id: relay
    on_turn_on:
    - delay: 300000ms
    - switch.turn_off: relay

  - platform: ld2410
    engineering_mode:
      name: "engineering mode"
    bluetooth:
      name: "control bluetooth"

sensor:
  - platform: ld2410
    light:
      name: light
    moving_distance:
      id: moving_distance
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance
      id: ld2410_distance
#      on_value:
#        then:
#          - if:
#              condition:
#                lambda: 'return ((id(ld2410_distance).state < 100) and (id(timer_off)=0);'
#              then:
#                - logger.log: "Distance inférieure à 100 cm, activation du relais"
#                - switch.turn_on: relay

    g0:
      move_energy:
        name: g0 move energy
      still_energy:
        name: g0 still energy
    g1:
      move_energy:
        name: g1 move energy
      still_energy:
        name: g1 still energy
    g2:
      move_energy:
        name: g2 move energy
      still_energy:
        name: g2 still energy
    g3:
      move_energy:
        name: g3 move energy
      still_energy:
        name: g3 still energy
    g4:
      move_energy:
        name: g4 move energy
      still_energy:
        name: g4 still energy
    g5:
      move_energy:
        name: g5 move energy
      still_energy:
        name: g5 still energy
    g6:
      move_energy:
        name: g6 move energy
      still_energy:
        name: g6 still energy
    g7:
      move_energy:
        name: g7 move energy
      still_energy:
        name: g7 still energy
    g8:
      move_energy:
        name: g8 move energy
      still_energy:
        name: g8 still energy

binary_sensor:

  - platform: ld2410
    has_target:
      id: Presence
      name: Presence
    has_moving_target:
      id: Move
      name: Moving Target
    has_still_target:
      id: still
      name: Still Target
    out_pin_presence_status:
      name: out pin presence status

  - platform: gpio
    pin:
      number: GPIO23
      inverted: true    
    id: emergency_stop
    name: "Stop"
    on_press:
      then:
        - switch.turn_off: relay

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      id: device_ip_address

